#include <SDL2/SDL.h>
#include <SDL2/SDL_ttf.h>
#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>
#define SDL_MAIN_HANDLED
#include <fstream>

const int WINDOW_WIDTH = 640;
const int WINDOW_HEIGHT = 480;
const int SNAKE_SIZE = 20; // Taille du serpent et des pommes
const int INITIAL_LENGTH = 3;
const int NUM_APPLES = 3;  // Nombre de pommes à générer

enum Direction { UP, DOWN, LEFT, RIGHT };

struct Apple {
    int x, y;
};

struct Snake {
    std::vector<SDL_Point> body;
    Direction dir;
};

bool checkCollision(const Snake& snake) {
    const SDL_Point& head = snake.body[0];
    // Collision avec le mur
    if (head.x < 0 || head.x >= WINDOW_WIDTH || head.y < 0 || head.y >= WINDOW_HEIGHT) {
        return true;
    }
    // Collision avec la queue
    for (size_t i = 1; i < snake.body.size(); ++i) {
        if (head.x == snake.body[i].x && head.y == snake.body[i].y) {
            return true;
        }
    }
    return false;
}

void generateApples(std::vector<Apple>& apples, const Snake& snake) {
    apples.clear();
    for (int i = 0; i < NUM_APPLES; ++i) {
        Apple apple;
        bool validPosition;
        do {
            validPosition = true;
            apple.x = (rand() % (WINDOW_WIDTH / SNAKE_SIZE)) * SNAKE_SIZE;
            apple.y = (rand() % (WINDOW_HEIGHT / SNAKE_SIZE)) * SNAKE_SIZE;

            // Vérifier que la pomme ne se trouve pas sur le serpent
            for (size_t j = 0; j < snake.body.size(); ++j) {
                if (apple.x == snake.body[j].x && apple.y == snake.body[j].y) {
                    validPosition = false;
                    break;
                }
            }
        } while (!validPosition);
        apples.push_back(apple);
    }
}

void moveSnake(Snake& snake) {
    SDL_Point newHead = snake.body[0];

    switch (snake.dir) {
        case UP: newHead.y -= SNAKE_SIZE; break;
        case DOWN: newHead.y += SNAKE_SIZE; break;
        case LEFT: newHead.x -= SNAKE_SIZE; break;
        case RIGHT: newHead.x += SNAKE_SIZE; break;
    }

    // Ajout de la nouvelle tête
    snake.body.insert(snake.body.begin(), newHead);
    // Supprime la dernière partie du serpent si aucune pomme n'est mangée
    snake.body.pop_back();
}

void growSnake(Snake& snake) {
    SDL_Point newTail = snake.body.back();
    snake.body.push_back(newTail);
}

void renderCircle(SDL_Renderer* renderer, int x, int y, int radius, SDL_Color color) {
    SDL_SetRenderDrawColor(renderer, color.r, color.g, color.b, color.a);
    for (int w = 0; w < radius * 2; w++) {
        for (int h = 0; h < radius * 2; h++) {
            int dx = radius - w; // Distance horizontale au centre
            int dy = radius - h; // Distance verticale au centre
            if ((dx * dx + dy * dy) <= (radius * radius)) {
                SDL_RenderDrawPoint(renderer, x + dx, y + dy);
            }
        }
    }
}

void renderText(SDL_Renderer* renderer, TTF_Font* font, const char* text, SDL_Color color, int x, int y) {
    SDL_Surface* surface = TTF_RenderText_Solid(font, text, color);
    SDL_Texture* texture = SDL_CreateTextureFromSurface(renderer, surface);

    SDL_Rect destRect;
    destRect.x = x;
    destRect.y = y;
    destRect.w = surface->w;
    destRect.h = surface->h;

    SDL_RenderCopy(renderer, texture, nullptr, &destRect);

    SDL_FreeSurface(surface);
    SDL_DestroyTexture(texture);
}

void displayMenu(SDL_Renderer* renderer, TTF_Font* font) {
    // Rendu du menu
    SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255); // Fond noir
    SDL_RenderClear(renderer);

    // Définir la couleur du texte
    SDL_Color white = {255, 255, 255, 255}; // Blanc

    // Afficher les options du menu
    renderText(renderer, font, "1. Jouer !", white, 100, 100);
    renderText(renderer, font, "2. Laisser l'ordinateur jouer", white, 100, 200);
    renderText(renderer, font, "3. Charger une partie récente", white, 100, 300);

    SDL_RenderPresent(renderer); // Afficher les options du menu
}

void moveSnakeAI(Snake& snake, const std::vector<Apple>& apples) {
    if (apples.empty()) return; // Si aucune pomme, ne pas bouger

    SDL_Point head = snake.body[0];
    Apple closestApple = apples[0]; // Initialiser avec la première pomme

    // Trouver la pomme la plus proche
    for (const auto& apple : apples) {
        if (abs(apple.x - head.x) + abs(apple.y - head.y) < abs(closestApple.x - head.x) + abs(closestApple.y - head.y)) {
            closestApple = apple; // Mettre à jour la pomme la plus proche
        }
    }

    // Déterminer la direction vers la pomme la plus proche
    if (head.x < closestApple.x) {
        snake.dir = RIGHT;
    } else if (head.x > closestApple.x) {
        snake.dir = LEFT;
    } else if (head.y < closestApple.y) {
        snake.dir = DOWN;
    } else if (head.y > closestApple.y) {
        snake.dir = UP;
    }
}

// Fonction pour sauvegarder l'état du jeu
void saveGame(const Snake& snake, const std::vector<Apple>& apples, int applesEaten, int speed) {
    std::ofstream saveFile("savegame.txt");
    if (!saveFile) {
        std::cerr << "Erreur lors de la sauvegarde du jeu." << std::endl;
        return;
    }

    // Sauvegarder le serpent
    saveFile << snake.body.size() << std::endl;
    for (const auto& segment : snake.body) {
        saveFile << segment.x << " " << segment.y << std::endl;
    }

    // Sauvegarder la direction du serpent
    saveFile << static_cast<int>(snake.dir) << std::endl;

    // Sauvegarder les pommes
    saveFile << apples.size() << std::endl;
    for (const auto& apple : apples) {
        saveFile << apple.x << " " << apple.y << std::endl;
    }

    // Sauvegarder le nombre de pommes mangées
    saveFile << applesEaten << std::endl;

    // Sauvegarder la vitesse
    saveFile << speed << std::endl;

    saveFile.close();
    std::cout << "Jeu sauvegardé avec succès." << std::endl;
}

// Fonction pour charger l'état du jeu
bool loadGame(Snake& snake, std::vector<Apple>& apples, int& applesEaten, int& speed) {
    std::ifstream loadFile("savegame.txt");
    if (!loadFile) {
        std::cerr << "Erreur lors du chargement du jeu." << std::endl;
        return false;
    }

    // Charger le serpent
    int snakeLength;
    loadFile >> snakeLength;
    snake.body.clear();
    for (int i = 0; i < snakeLength; ++i) {
        SDL_Point segment;
        loadFile >> segment.x >> segment.y;
        snake.body.push_back(segment);
    }

    // Charger la direction du serpent
    int dir;
    loadFile >> dir;
    snake.dir = static_cast<Direction>(dir);

    // Charger les pommes
    int appleCount;
    loadFile >> appleCount;
    apples.clear();
    for (int i = 0; i < appleCount; ++i) {
        Apple apple;
        loadFile >> apple.x >> apple.y;
        apples.push_back(apple);
    }

    // Charger le nombre de pommes mangées
    loadFile >> applesEaten;

    // Charger la vitesse
    loadFile >> speed;

    loadFile.close();
    std::cout << "Jeu chargé avec succès." << std::endl;
    return true;
}


int main(int argc, char* argv[]) {
    srand(static_cast<unsigned>(time(0)));

    if (SDL_Init(SDL_INIT_VIDEO) < 0) {
        std::cerr << "Erreur d'initialisation SDL: " << SDL_GetError() << std::endl;
        return -1;
    }

    if (TTF_Init() == -1) {
        std::cerr << "Erreur d'initialisation SDL_ttf: " << TTF_GetError() << std::endl;
        SDL_Quit();
        return -1;
    }

    SDL_Window* window = SDL_CreateWindow("Jeu du Serpent", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, WINDOW_WIDTH, WINDOW_HEIGHT, SDL_WINDOW_SHOWN);
    if (!window) {
        std::cerr << "Erreur de création de la fenêtre: " << SDL_GetError() << std::endl;
        SDL_Quit();
        return -1;
    }

    SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);
    if (!renderer) {
        std::cerr << "Erreur de création du renderer: " << SDL_GetError() << std::endl;
        SDL_DestroyWindow(window);
        SDL_Quit();
        return -1;
    }

    // Charger une police pour le texte
    TTF_Font* font = TTF_OpenFont("C:/Users/melis/Downloads/Roboto/Roboto-Black.ttf", 24);
    if (!font) {
        std::cerr << "Erreur de chargement de la police: " << TTF_GetError() << std::endl;
        SDL_DestroyRenderer(renderer);
        SDL_DestroyWindow(window);
        TTF_Quit();
        SDL_Quit();
        return -1;
    }

    bool running = true;
    bool inMenu = true;
    SDL_Event event;
    int choice = 0; // 0 = pas encore choisi, 1 = jouer, 2 = IA, 3 = vitesse
	int speed = 1; // 1 = lent, 2 = rapide
	int delayTime = (speed == 1) ? 150 : 75; // Durée d'attente en millisecondes
    int applesEaten = 0; // Compteur de pommes mangées
	Snake snake;  // Le serpent est maintenant défini ici
    std::vector<Apple> apples;
    while (running) {
        if (inMenu) {
            displayMenu(renderer, font);
            while (SDL_PollEvent(&event)) {
                if (event.type == SDL_QUIT) {
                    running = false;
                    break;
                } else if (event.type == SDL_KEYDOWN) {
                    switch (event.key.keysym.sym) {
                        case SDLK_1: // Jouer
                            choice = 1;
                            inMenu = false;
                            // Initialiser le serpent pour une nouvelle partie
                            snake.dir = RIGHT; 
                            for (int i = 0; i < INITIAL_LENGTH; ++i) {
                                snake.body.push_back({INITIAL_LENGTH * SNAKE_SIZE - (i * SNAKE_SIZE), 0});
                            }
                            generateApples(apples, snake);
                            break;
                        case SDLK_2: // Laisser l'IA jouer
                            choice = 2;
                            inMenu = false;
                            // Initialiser le serpent pour une nouvelle partie
                            snake.dir = RIGHT;
                            for (int i = 0; i < INITIAL_LENGTH; ++i) {
                                snake.body.push_back({INITIAL_LENGTH * SNAKE_SIZE - (i * SNAKE_SIZE), 0});
                            }
                            generateApples(apples, snake);
                            break;
                        case SDLK_3: // Reprendre la partie récente
                        	// Essayer de charger une partie sauvegardée
	                        if (!loadGame(snake, apples, applesEaten, speed)) {
	                            std::cout << "Aucun partie récente trouvée." << std::endl;
	                        } else {
	                            choice = 1; // Charger le jeu et commencer à jouer
	                            inMenu = false;
	                        }
						break;
                    }
                }
            }
        } else {
   /*         Snake snake;
            snake.dir = RIGHT; // Direction initiale
            for (int i = 0; i < INITIAL_LENGTH; ++i) {
                snake.body.push_back({INITIAL_LENGTH * SNAKE_SIZE - (i * SNAKE_SIZE), 0});
            }

            std::vector<Apple> apples;
            generateApples(apples, snake); */
			
            while (running) {
                while (SDL_PollEvent(&event)) {
                    if (event.type == SDL_QUIT) {
                        running = false;
                        break;
                    } else if (event.type == SDL_KEYDOWN && choice == 1) { // Contrôle par l'utilisateur
                        switch (event.key.keysym.sym) {
                            case SDLK_UP:    if (snake.dir != DOWN) snake.dir = UP; break;
                            case SDLK_DOWN:  if (snake.dir != UP) snake.dir = DOWN; break;
                            case SDLK_LEFT:  if (snake.dir != RIGHT) snake.dir = LEFT; break;
                            case SDLK_RIGHT: if (snake.dir != LEFT) snake.dir = RIGHT; break;
                            case SDLK_1: speed = 1; delayTime = 150; break; // Vitesse 1
                    		case SDLK_2: speed = 2; delayTime = 75; break;   // Vitesse 2
						    case SDLK_s: saveGame(snake, apples, applesEaten, speed); break; // Sauvegarder la partie 				            
                        }
                    }
                }

                if (choice == 2) { // Laisser l'IA jouer
                    moveSnakeAI(snake, apples);
                }

                moveSnake(snake);

                // Vérifier les collisions
                if (checkCollision(snake)) {
                    running = false; // Fin de la partie
                }

                // Vérifier si le serpent mange une pomme
                for (size_t i = 0; i < apples.size(); ++i) {
                    if (snake.body[0].x == apples[i].x && snake.body[0].y == apples[i].y) {
                        growSnake(snake);
                        applesEaten++;
                        apples.erase(apples.begin() + i);
                        if (applesEaten >= NUM_APPLES) {
                            generateApples(apples, snake);
                            applesEaten = 0; // Réinitialiser le compteur
                        }
                        break; // Sortir de la boucle une fois qu'une pomme est mangée
                    }
                }

                SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255); // Fond noir
                SDL_RenderClear(renderer);

                // Rendu du serpent
                SDL_SetRenderDrawColor(renderer, 0, 255, 0, 255); // Vert
                for (const auto& segment : snake.body) {
                    SDL_Rect rect = { segment.x, segment.y, SNAKE_SIZE, SNAKE_SIZE };
                    SDL_RenderFillRect(renderer, &rect);
                }

                // Rendu des pommes
                SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255); // Rouge
                for (const auto& apple : apples) {
                    renderCircle(renderer, apple.x + SNAKE_SIZE / 2, apple.y + SNAKE_SIZE / 2, SNAKE_SIZE / 2, {255, 0, 0, 255});
                }

                SDL_RenderPresent(renderer);
                SDL_Delay(delayTime); // Contrôler la vitesse
               // Définir la vitesse initiale (1 ou 2)
            }
        }
    }

    // Libérer les ressources
    TTF_CloseFont(font);
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    TTF_Quit();
    SDL_Quit();

    return 0;
}
